/*
 * generated by Xtext 2.24.0
 */
package uk.kcl.ac.inf.jsonlang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.kcl.ac.inf.jsonlang.ide.contentassist.antlr.internal.InternalJsonLanguageParser;
import uk.kcl.ac.inf.jsonlang.services.JsonLanguageGrammarAccess;

public class JsonLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JsonLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JsonLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getCOMPLEXAccess().getAlternatives_4_0(), "rule__COMPLEX__Alternatives_4_0");
			builder.put(grammarAccess.getJsonProgramAccess().getGroup(), "rule__JsonProgram__Group__0");
			builder.put(grammarAccess.getJsonProgramAccess().getGroup_1(), "rule__JsonProgram__Group_1__0");
			builder.put(grammarAccess.getJsonProgramAccess().getGroup_1_1(), "rule__JsonProgram__Group_1_1__0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
			builder.put(grammarAccess.getArrayAccess().getGroup_1(), "rule__Array__Group_1__0");
			builder.put(grammarAccess.getArrayAccess().getGroup_1_1(), "rule__Array__Group_1_1__0");
			builder.put(grammarAccess.getCOMPLEXAccess().getGroup(), "rule__COMPLEX__Group__0");
			builder.put(grammarAccess.getCOMPLEXAccess().getGroup_4(), "rule__COMPLEX__Group_4__0");
			builder.put(grammarAccess.getJsonProgramAccess().getStatementAssignment_1_0(), "rule__JsonProgram__StatementAssignment_1_0");
			builder.put(grammarAccess.getJsonProgramAccess().getStatementAssignment_1_1_1(), "rule__JsonProgram__StatementAssignment_1_1_1");
			builder.put(grammarAccess.getStatementAccess().getKeyAssignment_0(), "rule__Statement__KeyAssignment_0");
			builder.put(grammarAccess.getStatementAccess().getValueAssignment_2(), "rule__Statement__ValueAssignment_2");
			builder.put(grammarAccess.getArrayAccess().getValueAssignment_1_0(), "rule__Array__ValueAssignment_1_0");
			builder.put(grammarAccess.getArrayAccess().getValueAssignment_1_1_1(), "rule__Array__ValueAssignment_1_1_1");
			builder.put(grammarAccess.getTextAccess().getValAssignment(), "rule__Text__ValAssignment");
			builder.put(grammarAccess.getBooleanAccess().getValAssignment_0(), "rule__Boolean__ValAssignment_0");
			builder.put(grammarAccess.getNullAccess().getValAssignment(), "rule__Null__ValAssignment");
			builder.put(grammarAccess.getIntNumberAccess().getValAssignment(), "rule__IntNumber__ValAssignment");
			builder.put(grammarAccess.getComplexNumberAccess().getValAssignment(), "rule__ComplexNumber__ValAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JsonLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalJsonLanguageParser createParser() {
		InternalJsonLanguageParser result = new InternalJsonLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JsonLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JsonLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
