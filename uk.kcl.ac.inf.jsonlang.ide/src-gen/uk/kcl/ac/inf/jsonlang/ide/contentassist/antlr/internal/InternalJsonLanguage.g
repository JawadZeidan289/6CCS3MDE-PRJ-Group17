/*
 * generated by Xtext 2.24.0
 */
grammar InternalJsonLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.kcl.ac.inf.jsonlang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.kcl.ac.inf.jsonlang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.kcl.ac.inf.jsonlang.services.JsonLanguageGrammarAccess;

}
@parser::members {
	private JsonLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(JsonLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleJsonProgram
entryRuleJsonProgram
:
{ before(grammarAccess.getJsonProgramRule()); }
	 ruleJsonProgram
{ after(grammarAccess.getJsonProgramRule()); } 
	 EOF 
;

// Rule JsonProgram
ruleJsonProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJsonProgramAccess().getGroup()); }
		(rule__JsonProgram__Group__0)
		{ after(grammarAccess.getJsonProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArray
entryRuleArray
:
{ before(grammarAccess.getArrayRule()); }
	 ruleArray
{ after(grammarAccess.getArrayRule()); } 
	 EOF 
;

// Rule Array
ruleArray 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayAccess().getGroup()); }
		(rule__Array__Group__0)
		{ after(grammarAccess.getArrayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleText
entryRuleText
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextAccess().getValAssignment()); }
		(rule__Text__ValAssignment)
		{ after(grammarAccess.getTextAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNull
entryRuleNull
:
{ before(grammarAccess.getNullRule()); }
	 ruleNull
{ after(grammarAccess.getNullRule()); } 
	 EOF 
;

// Rule Null
ruleNull 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullAccess().getValAssignment()); }
		(rule__Null__ValAssignment)
		{ after(grammarAccess.getNullAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getAlternatives()); }
		(rule__Number__Alternatives)
		{ after(grammarAccess.getNumberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntNumber
entryRuleIntNumber
:
{ before(grammarAccess.getIntNumberRule()); }
	 ruleIntNumber
{ after(grammarAccess.getIntNumberRule()); } 
	 EOF 
;

// Rule IntNumber
ruleIntNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntNumberAccess().getValAssignment()); }
		(rule__IntNumber__ValAssignment)
		{ after(grammarAccess.getIntNumberAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFinalint
entryRuleFinalint
:
{ before(grammarAccess.getFinalintRule()); }
	 ruleFinalint
{ after(grammarAccess.getFinalintRule()); } 
	 EOF 
;

// Rule Finalint
ruleFinalint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFinalintAccess().getGroup()); }
		(rule__Finalint__Group__0)
		{ after(grammarAccess.getFinalintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplexNumber
entryRuleComplexNumber
:
{ before(grammarAccess.getComplexNumberRule()); }
	 ruleComplexNumber
{ after(grammarAccess.getComplexNumberRule()); } 
	 EOF 
;

// Rule ComplexNumber
ruleComplexNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplexNumberAccess().getValAssignment()); }
		(rule__ComplexNumber__ValAssignment)
		{ after(grammarAccess.getComplexNumberAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMPLEX
entryRuleCOMPLEX
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getCOMPLEXRule()); }
	 ruleCOMPLEX
{ after(grammarAccess.getCOMPLEXRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule COMPLEX
ruleCOMPLEX 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMPLEXAccess().getGroup()); }
		(rule__COMPLEX__Group__0)
		{ after(grammarAccess.getCOMPLEXAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getJsonProgramParserRuleCall_0()); }
		ruleJsonProgram
		{ after(grammarAccess.getValueAccess().getJsonProgramParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getArrayParserRuleCall_1()); }
		ruleArray
		{ after(grammarAccess.getValueAccess().getArrayParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getTextParserRuleCall_2()); }
		ruleText
		{ after(grammarAccess.getValueAccess().getTextParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNumberParserRuleCall_3()); }
		ruleNumber
		{ after(grammarAccess.getValueAccess().getNumberParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getBooleanParserRuleCall_4()); }
		ruleBoolean
		{ after(grammarAccess.getValueAccess().getBooleanParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNullParserRuleCall_5()); }
		ruleNull
		{ after(grammarAccess.getValueAccess().getNullParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getValAssignment_0()); }
		(rule__Boolean__ValAssignment_0)
		{ after(grammarAccess.getBooleanAccess().getValAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getIntNumberParserRuleCall_0()); }
		ruleIntNumber
		{ after(grammarAccess.getNumberAccess().getIntNumberParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getComplexNumberParserRuleCall_1()); }
		ruleComplexNumber
		{ after(grammarAccess.getNumberAccess().getComplexNumberParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Alternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMPLEXAccess().getEKeyword_4_0_0()); }
		'E'
		{ after(grammarAccess.getCOMPLEXAccess().getEKeyword_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCOMPLEXAccess().getEKeyword_4_0_1()); }
		'e'
		{ after(grammarAccess.getCOMPLEXAccess().getEKeyword_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JsonProgram__Group__0__Impl
	rule__JsonProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJsonProgramAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getJsonProgramAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JsonProgram__Group__1__Impl
	rule__JsonProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJsonProgramAccess().getGroup_1()); }
	(rule__JsonProgram__Group_1__0)?
	{ after(grammarAccess.getJsonProgramAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JsonProgram__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJsonProgramAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getJsonProgramAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JsonProgram__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JsonProgram__Group_1__0__Impl
	rule__JsonProgram__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJsonProgramAccess().getStatementAssignment_1_0()); }
	(rule__JsonProgram__StatementAssignment_1_0)
	{ after(grammarAccess.getJsonProgramAccess().getStatementAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JsonProgram__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJsonProgramAccess().getGroup_1_1()); }
	(rule__JsonProgram__Group_1_1__0)*
	{ after(grammarAccess.getJsonProgramAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JsonProgram__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JsonProgram__Group_1_1__0__Impl
	rule__JsonProgram__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJsonProgramAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getJsonProgramAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JsonProgram__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJsonProgramAccess().getStatementAssignment_1_1_1()); }
	(rule__JsonProgram__StatementAssignment_1_1_1)
	{ after(grammarAccess.getJsonProgramAccess().getStatementAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getKeyAssignment_0()); }
	(rule__Statement__KeyAssignment_0)
	{ after(grammarAccess.getStatementAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
	rule__Statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getStatementAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getValueAssignment_2()); }
	(rule__Statement__ValueAssignment_2)
	{ after(grammarAccess.getStatementAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__0__Impl
	rule__Array__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__1__Impl
	rule__Array__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getGroup_1()); }
	(rule__Array__Group_1__0)?
	{ after(grammarAccess.getArrayAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_1__0__Impl
	rule__Array__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getValueAssignment_1_0()); }
	(rule__Array__ValueAssignment_1_0)
	{ after(grammarAccess.getArrayAccess().getValueAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getGroup_1_1()); }
	(rule__Array__Group_1_1__0)*
	{ after(grammarAccess.getArrayAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_1_1__0__Impl
	rule__Array__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getArrayAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getValueAssignment_1_1_1()); }
	(rule__Array__ValueAssignment_1_1_1)
	{ after(grammarAccess.getArrayAccess().getValueAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Finalint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Finalint__Group__0__Impl
	rule__Finalint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Finalint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinalintAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getFinalintAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Finalint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Finalint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Finalint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinalintAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getFinalintAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__COMPLEX__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group__0__Impl
	rule__COMPLEX__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getCOMPLEXAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group__1__Impl
	rule__COMPLEX__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getINTTerminalRuleCall_1()); }
	(RULE_INT)?
	{ after(grammarAccess.getCOMPLEXAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group__2__Impl
	rule__COMPLEX__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getCOMPLEXAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group__3__Impl
	rule__COMPLEX__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
	{ after(grammarAccess.getCOMPLEXAccess().getINTTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getGroup_4()); }
	(rule__COMPLEX__Group_4__0)?
	{ after(grammarAccess.getCOMPLEXAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__COMPLEX__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group_4__0__Impl
	rule__COMPLEX__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getAlternatives_4_0()); }
	(rule__COMPLEX__Alternatives_4_0)
	{ after(grammarAccess.getCOMPLEXAccess().getAlternatives_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group_4__1__Impl
	rule__COMPLEX__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getHyphenMinusKeyword_4_1()); }
	('-')?
	{ after(grammarAccess.getCOMPLEXAccess().getHyphenMinusKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group_4__2__Impl
	rule__COMPLEX__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getPlusSignKeyword_4_2()); }
	('+')?
	{ after(grammarAccess.getCOMPLEXAccess().getPlusSignKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPLEX__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPLEX__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPLEXAccess().getINTTerminalRuleCall_4_3()); }
	RULE_INT
	{ after(grammarAccess.getCOMPLEXAccess().getINTTerminalRuleCall_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JsonProgram__StatementAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJsonProgramAccess().getStatementStatementParserRuleCall_1_0_0()); }
		ruleStatement
		{ after(grammarAccess.getJsonProgramAccess().getStatementStatementParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonProgram__StatementAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJsonProgramAccess().getStatementStatementParserRuleCall_1_1_1_0()); }
		ruleStatement
		{ after(grammarAccess.getJsonProgramAccess().getStatementStatementParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getKeySTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getStatementAccess().getKeySTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getValueValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getStatementAccess().getValueValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ValueAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayAccess().getValueValueParserRuleCall_1_0_0()); }
		ruleValue
		{ after(grammarAccess.getArrayAccess().getValueValueParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ValueAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayAccess().getValueValueParserRuleCall_1_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getArrayAccess().getValueValueParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Text__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextAccess().getValSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getTextAccess().getValSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getValTrueKeyword_0_0()); }
		(
			{ before(grammarAccess.getBooleanAccess().getValTrueKeyword_0_0()); }
			'true'
			{ after(grammarAccess.getBooleanAccess().getValTrueKeyword_0_0()); }
		)
		{ after(grammarAccess.getBooleanAccess().getValTrueKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Null__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNullAccess().getValNullKeyword_0()); }
		(
			{ before(grammarAccess.getNullAccess().getValNullKeyword_0()); }
			'null'
			{ after(grammarAccess.getNullAccess().getValNullKeyword_0()); }
		)
		{ after(grammarAccess.getNullAccess().getValNullKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntNumber__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntNumberAccess().getValFinalintParserRuleCall_0()); }
		ruleFinalint
		{ after(grammarAccess.getIntNumberAccess().getValFinalintParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexNumber__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexNumberAccess().getValCOMPLEXParserRuleCall_0()); }
		ruleCOMPLEX
		{ after(grammarAccess.getComplexNumberAccess().getValCOMPLEXParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
