/*
 * generated by Xtext 2.24.0
 */
package uk.kcl.ac.inf.jsonlang.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.kcl.ac.inf.jsonlang.jSONLanguage.jSONLanguage

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JSONLanguageGenerator extends AbstractGenerator {

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val model = resource.contents.head as jSONLanguage
        fsa.generateFile(deriveTargetFileNameFor(model, resource), model.generate)
        val className = resource.deriveClassName
        fsa.generateFile(className + '.java', model.doGenerateClass(className))
    }
    
    def deriveClassName(Resource resource){
        val origFilename = resource.URI.lastSegment
        origFilename.substring(0, origFilename.indexOf('.')).toFirstUpper + 'JSON'
    }
    
    def deriveTargetFileNameFor(jSONLanguage model, Resource resource){
        resource.URI.appendFileExtension('txt').lastSegment
    }
    
    def CharSequence doGenerateClass(jSONLanguage language, Object object)'''
        
    '''
    
    
    def generate(jSONLanguage model)'''
        
    
    '''
}
