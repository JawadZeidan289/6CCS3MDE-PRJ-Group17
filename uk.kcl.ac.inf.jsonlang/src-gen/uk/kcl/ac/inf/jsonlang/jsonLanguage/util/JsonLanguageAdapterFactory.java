/**
 * generated by Xtext 2.24.0
 */
package uk.kcl.ac.inf.jsonlang.jsonLanguage.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uk.kcl.ac.inf.jsonlang.jsonLanguage.Array;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.ComplexNumber;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.IntNumber;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonLanguagePackage;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonProgram;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Null;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Statement;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Text;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Value;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonLanguagePackage
 * @generated
 */
public class JsonLanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static JsonLanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JsonLanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = JsonLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JsonLanguageSwitch<Adapter> modelSwitch =
    new JsonLanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseJsonProgram(JsonProgram object)
      {
        return createJsonProgramAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseArray(Array object)
      {
        return createArrayAdapter();
      }
      @Override
      public Adapter caseText(Text object)
      {
        return createTextAdapter();
      }
      @Override
      public Adapter caseBoolean(uk.kcl.ac.inf.jsonlang.jsonLanguage.Boolean object)
      {
        return createBooleanAdapter();
      }
      @Override
      public Adapter caseNull(Null object)
      {
        return createNullAdapter();
      }
      @Override
      public Adapter caseNumber(uk.kcl.ac.inf.jsonlang.jsonLanguage.Number object)
      {
        return createNumberAdapter();
      }
      @Override
      public Adapter caseIntNumber(IntNumber object)
      {
        return createIntNumberAdapter();
      }
      @Override
      public Adapter caseComplexNumber(ComplexNumber object)
      {
        return createComplexNumberAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonProgram <em>Json Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonProgram
   * @generated
   */
  public Adapter createJsonProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.Array <em>Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.Array
   * @generated
   */
  public Adapter createArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.Text <em>Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.Text
   * @generated
   */
  public Adapter createTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.Boolean <em>Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.Boolean
   * @generated
   */
  public Adapter createBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.Null <em>Null</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.Null
   * @generated
   */
  public Adapter createNullAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.Number <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.Number
   * @generated
   */
  public Adapter createNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.IntNumber <em>Int Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.IntNumber
   * @generated
   */
  public Adapter createIntNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.kcl.ac.inf.jsonlang.jsonLanguage.ComplexNumber <em>Complex Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.kcl.ac.inf.jsonlang.jsonLanguage.ComplexNumber
   * @generated
   */
  public Adapter createComplexNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //JsonLanguageAdapterFactory
