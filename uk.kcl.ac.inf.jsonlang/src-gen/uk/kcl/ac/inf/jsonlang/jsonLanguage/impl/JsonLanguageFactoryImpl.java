/**
 * generated by Xtext 2.24.0
 */
package uk.kcl.ac.inf.jsonlang.jsonLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.kcl.ac.inf.jsonlang.jsonLanguage.Array;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.ComplexNumber;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.IntNumber;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonLanguageFactory;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonLanguagePackage;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonProgram;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Null;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Statement;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Text;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JsonLanguageFactoryImpl extends EFactoryImpl implements JsonLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static JsonLanguageFactory init()
  {
    try
    {
      JsonLanguageFactory theJsonLanguageFactory = (JsonLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(JsonLanguagePackage.eNS_URI);
      if (theJsonLanguageFactory != null)
      {
        return theJsonLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new JsonLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JsonLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case JsonLanguagePackage.JSON_PROGRAM: return createJsonProgram();
      case JsonLanguagePackage.STATEMENT: return createStatement();
      case JsonLanguagePackage.VALUE: return createValue();
      case JsonLanguagePackage.ARRAY: return createArray();
      case JsonLanguagePackage.TEXT: return createText();
      case JsonLanguagePackage.BOOLEAN: return createBoolean();
      case JsonLanguagePackage.NULL: return createNull();
      case JsonLanguagePackage.NUMBER: return createNumber();
      case JsonLanguagePackage.INT_NUMBER: return createIntNumber();
      case JsonLanguagePackage.COMPLEX_NUMBER: return createComplexNumber();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonProgram createJsonProgram()
  {
    JsonProgramImpl jsonProgram = new JsonProgramImpl();
    return jsonProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Array createArray()
  {
    ArrayImpl array = new ArrayImpl();
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public uk.kcl.ac.inf.jsonlang.jsonLanguage.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Null createNull()
  {
    NullImpl null_ = new NullImpl();
    return null_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public uk.kcl.ac.inf.jsonlang.jsonLanguage.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntNumber createIntNumber()
  {
    IntNumberImpl intNumber = new IntNumberImpl();
    return intNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexNumber createComplexNumber()
  {
    ComplexNumberImpl complexNumber = new ComplexNumberImpl();
    return complexNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonLanguagePackage getJsonLanguagePackage()
  {
    return (JsonLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static JsonLanguagePackage getPackage()
  {
    return JsonLanguagePackage.eINSTANCE;
  }

} //JsonLanguageFactoryImpl
