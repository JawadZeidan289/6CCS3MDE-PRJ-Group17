/*
 * generated by Xtext 2.24.0
 */
package uk.kcl.ac.inf.jsonlang.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Array;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.ComplexNumber;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.IntNumber;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonLanguagePackage;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.JsonProgram;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Null;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Statement;
import uk.kcl.ac.inf.jsonlang.jsonLanguage.Text;
import uk.kcl.ac.inf.jsonlang.services.JsonLanguageGrammarAccess;

@SuppressWarnings("all")
public class JsonLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JsonLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JsonLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonLanguagePackage.ARRAY:
				sequence_Array(context, (Array) semanticObject); 
				return; 
			case JsonLanguagePackage.BOOLEAN:
				sequence_Boolean(context, (uk.kcl.ac.inf.jsonlang.jsonLanguage.Boolean) semanticObject); 
				return; 
			case JsonLanguagePackage.COMPLEX_NUMBER:
				sequence_ComplexNumber(context, (ComplexNumber) semanticObject); 
				return; 
			case JsonLanguagePackage.INT_NUMBER:
				sequence_IntNumber(context, (IntNumber) semanticObject); 
				return; 
			case JsonLanguagePackage.JSON_PROGRAM:
				sequence_JsonProgram(context, (JsonProgram) semanticObject); 
				return; 
			case JsonLanguagePackage.NULL:
				sequence_Null(context, (Null) semanticObject); 
				return; 
			case JsonLanguagePackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case JsonLanguagePackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns Array
	 *     Array returns Array
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)
	 */
	protected void sequence_Array(ISerializationContext context, Array semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Boolean
	 *     Boolean returns Boolean
	 *
	 * Constraint:
	 *     val='true'
	 */
	protected void sequence_Boolean(ISerializationContext context, uk.kcl.ac.inf.jsonlang.jsonLanguage.Boolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonLanguagePackage.Literals.BOOLEAN__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonLanguagePackage.Literals.BOOLEAN__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanAccess().getValTrueKeyword_0_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ComplexNumber
	 *     Number returns ComplexNumber
	 *     ComplexNumber returns ComplexNumber
	 *
	 * Constraint:
	 *     val=COMPLEX
	 */
	protected void sequence_ComplexNumber(ISerializationContext context, ComplexNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonLanguagePackage.Literals.COMPLEX_NUMBER__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonLanguagePackage.Literals.COMPLEX_NUMBER__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComplexNumberAccess().getValCOMPLEXParserRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns IntNumber
	 *     Number returns IntNumber
	 *     IntNumber returns IntNumber
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_IntNumber(ISerializationContext context, IntNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonLanguagePackage.Literals.INT_NUMBER__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonLanguagePackage.Literals.INT_NUMBER__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntNumberAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonProgram returns JsonProgram
	 *     Value returns JsonProgram
	 *
	 * Constraint:
	 *     (statement+=Statement statement+=Statement*)
	 */
	protected void sequence_JsonProgram(ISerializationContext context, JsonProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Null
	 *     Null returns Null
	 *
	 * Constraint:
	 *     val='null'
	 */
	protected void sequence_Null(ISerializationContext context, Null semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonLanguagePackage.Literals.NULL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonLanguagePackage.Literals.NULL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullAccess().getValNullKeyword_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement
	 *
	 * Constraint:
	 *     (key=STRING value=Value)
	 */
	protected void sequence_Statement(ISerializationContext context, Statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonLanguagePackage.Literals.STATEMENT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonLanguagePackage.Literals.STATEMENT__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonLanguagePackage.Literals.STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonLanguagePackage.Literals.STATEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatementAccess().getKeySTRINGTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getStatementAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Text
	 *     Text returns Text
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonLanguagePackage.Literals.TEXT__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonLanguagePackage.Literals.TEXT__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
}
